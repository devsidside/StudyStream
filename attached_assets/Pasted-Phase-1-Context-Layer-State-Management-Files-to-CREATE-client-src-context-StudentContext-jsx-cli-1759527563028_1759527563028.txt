Phase 1: Context Layer (State Management) Files to CREATE: client/src/context/StudentContext.jsx client/src/context/VendorContext.jsx client/src/context/AdminContext.jsx What they'll contain: Student: profile data, enrolled courses, saved notes/projects, personalization filters (stream, year, subjects) Vendor: business profile, listed services, analytics data, bookings Admin: system stats, pending approvals, moderation tools Edge cases: Handle missing user profile data Sync with AuthContext for role-based loading Clear context on logout Phase 2: Database Schema Updates File to MODIFY: shared/schema.ts New tables to add: interactions (reviews, ratings, bookings) notifications (user alerts, reminders) Enhanced notes, projects, events with stream/year/subject fields vendors table with business details, location, categories Edge cases: Ensure backward compatibility with existing data Add proper indexes for filtering by stream/year Set up foreign key relationships Phase 3: Backend API Routes File to MODIFY: server/routes.ts New API endpoints: /api/notifications - CRUD for notifications /api/interactions - Reviews, ratings, bookings /api/search - Filtered search with FTS /api/ai/summarize - Note summarization /api/ai/quiz - Generate quizzes /api/ai/code-assist - Code debugging help /api/vendor/analytics - Vendor performance data /api/personalization - User preference filtering Edge cases: Rate limiting for AI endpoints Authentication/authorization checks Input validation and sanitization Error handling for external API failures Phase 4: Services Layer Files to CREATE: client/src/services/notesService.js - Notes CRUD operations client/src/services/projectsService.js - Projects CRUD operations client/src/services/vendorsService.js - Vendor management client/src/services/eventsService.js - Events CRUD operations client/src/services/notificationService.js - Notification handling client/src/services/aiService.js - AI integration wrapper client/src/services/mapService.js - Map/location services Edge cases: Handle offline scenarios Retry logic for failed requests Caching for frequently accessed data Phase 5: Custom Hooks Files to CREATE: client/src/hooks/useFetchNotes.jsx - Fetch filtered notes client/src/hooks/useFetchProjects.jsx - Fetch filtered projects client/src/hooks/useFetchVendors.jsx - Fetch nearby vendors client/src/hooks/useMapFilters.jsx - Map filtering logic client/src/hooks/useAIChat.jsx - AI assistant interactions client/src/hooks/useNotifications.jsx - Notification management client/src/hooks/usePersonalization.jsx - User filter preferences